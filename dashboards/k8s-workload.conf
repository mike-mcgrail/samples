// Dashboard to display default workload detail for Kuberntes
{
  description: "",
  parameters: [
      {
        facet: "k8s-controller",
        name: "Workloads",
        defaultValue: "select-service",
      }
    ],
    graphs: [
      {
        transposeTable: "true"
        query: """| left join main =( logfile contains 'kubernetes_events.log' k8s-cluster=* k8s-kind=* k8s-controller=#Workloads#
                                        | group Status=newest(reason), timestamp=newest(timestamp) by k8s-kind, k8s-controller, k8s-cluster, pod_namespace, pod_name
                                        | columns workload=k8s-controller, Status, k8s-kind, k8s-cluster, timestamp,  pod_namespace, pod_name),
                              replicas= (monitor ='openmetrics_monitor' and (metric='kube_deployment_status_replicas' or metric='kube_deployment_status_replicas_available')
                                        | group numberOfReplicasPerDeployment=max(metric ='kube_deployment_status_replicas' ? value : null), numberOfReplicasPerDeploymentAvailable=max(metric ='kube_deployment_status_replicas_available' ? value : null) by deployment) on main.workload = replicas.deployment
                                        | let numberOfReplicasPerDeploymentNormalized = (numberOfReplicasPerDeployment = null  ? 1 : numberOfReplicasPerDeployment), numberOfReplicasPerDeploymentAvailableNormalized = (numberOfReplicasPerDeploymentAvailable = null  ? 1 : numberOfReplicasPerDeploymentAvailable)
                  | sort -timestamp
                  | limit 1
                  | columns Status, 'Cluster '=k8s-cluster, Namespace=pod_namespace, workload, 'Kind '=k8s-kind, timestamp, Replicas = format("%d/%d",numberOfReplicasPerDeploymentAvailableNormalized,numberOfReplicasPerDeploymentNormalized)""",
        layout: {
  h: 12,
  w: 30,
  x: 0,
  y: 8
},
        filter: "off",
        graphStyle: "",
        title: "Detail",
        transposeTable: "true"
      },
      {
        query: """k8s-cluster = * k8s-controller=#Workloads# logfile contains 'kubernetes_events.log'
                    | group newestTs=newest(timestamp), Count=count(reason), newestMessage=newest(message_) by k8s-kind, k8s-controller, reason, k8s-cluster, logfile
                    | let queryLink = reason + '#@#/events?filter=(reason="' + reason + '")+($k8s-cluster+="' + k8s-cluster + '"+$k8s-controller="' + k8s-controller + '"+$logfile="' +logfile +'")+k8s-controller="' +k8s-controller +'"'  + '&startTime=' + querystart() + '&endTime=' + queryend()
                    | columns Action=queryLink, Count, 'timestamp' = newestTs, 'Most Recet Message'=newestMessage""",
        title: "Events",
        layout: {
  h: 18,
  w: 60,
  x: 0,
  y: 20
}
      },
      {
        query: """| join images = (monitor ='openmetrics_monitor' and pod=* and image=* and image != '' image_id!='' !(image contains 'sha256:') container != '' container != 'POD' | group newest(pod) by pod, container, image),
                         main =( logfile contains 'kubernetes_events.log' k8s-cluster=* k8s-kind=* k8s-controller=#Workloads#
                                  | group Status=newest(reason), timestamp=newest(timestamp) by k8s-kind, k8s-controller, k8s-cluster, pod_namespace, pod_name
                                  | columns workload=k8s-controller, Status, k8s-kind, k8s-cluster, timestamp,  pod_namespace, pod_name)
                        on images.pod=main.pod_name
                  | group count(pod) by container, image | columns  'Container'=container, Image=image """,
        title: "Workload Container/Images",
        graphStyle: "",
        layout: {
  h: 12,
  w: 30,
  x: 30,
  y: 8
}
      },
      {
        breakdownFacet: "k8s-controller",
        graphStyle: "line",
        lineSmoothing: "straightLines",
        plots: [
  {
    facet: "",
    filter: "k8s-controller=#Workloads#  reason = \"BackOff\" k8s-cluster=*",
    label: "rate"
  }
],
        title: "Workload Detail",
        layout: {
  h: 8,
  w: 60,
  x: 0,
  y: 0
}
      ,
      }
    ]
}
