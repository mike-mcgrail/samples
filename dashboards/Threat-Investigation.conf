{
  tabs: [{"tabName":"Overview","graphs":[
    {
      graphStyle: "stacked_bar",
      query: "event.category contains \"\" dataSource.category = 'security'\n| group count = count() by event.category\n| sort -count",

      title: "Count by event category",
      xAxis: "grouped_data",
      yScale: "linear",
      layout: {
  h: 13,
  w: 20,
  x: 0,
  y: 0
}
    },
    {
      graphStyle: "stacked_bar",
      query: "event.category = \"indicators\"\n| group count = count() by indicator.category \n| sort -count",

      title: "Indicators by category",
      xAxis: "grouped_data",
      yScale: "linear",
      layout: {
  h: 13,
  w: 13,
  x: 47,
  y: 0
}
    ,
    },
    {
      graphStyle: "line",
      layout: {
  h: 13,
  w: 27,
  x: 20,
  y: 0
},
      lineSmoothing: "straightLines",
      query: "event.category = 'file' dataSource.category = 'security'\n| group count = count() by timestamp = timebucket(\"1 minute\"), event.type\n| transpose event.type on timestamp",

      title: "File timeline",
      yScale: "linear"
    },
    {
      query: "event.category = \"process\" dataSource.category = 'security'\n| group distinct_spawned_processes=estimate_distinct(tgt.process.user) by src.process.user \n| sort -distinct_spawned_processes",

      title: "Spawned processes by user",
      graphStyle: "",
      showBarsColumn: "true",
      layout: {
  h: 14,
  w: 15,
  x: 30,
  y: 13
}
    ,
    },
    {
      query: "event.category = \"ip\" event.network.direction = \"OUTGOING\" dataSource.category = 'security'\n| group count = count() by dst.ip.address, src.process.name\n| sort -count\n| columns src.process.name, dst.ip.address, count",

      title: "TOP outgoing IP connections by process",
      graphStyle: "",
      showBarsColumn: "true",
      layout: {
  h: 14,
  w: 14,
  x: 0,
  y: 13
}
    },
    {
      query: "event.category = \"dns\" dataSource.category = 'security'\n| group count = count() by src.process.name, event.dns.request\n| sort -count",

      title: "TOP DNS petitions by process",
      layout: {
  h: 14,
  i: "6",
  minH: 3,
  minW: 6,
  w: 16,
  x: 14,
  y: 13
},
      graphStyle: "",
      showBarsColumn: "false"
    },
    {
      graphStyle: "",
      layout: {
        h: 14,
        i: "4",
        minH: 3,
        minW: 6,
        w: 15,
        x: 45,
        y: 13
      },
      query: "event.category = 'indicators' indicator.name contains (\"appLockerBypass\",\n\"authenticationPackageImp\",\n\"blockedMimikatz\",\n\"bloodHound\",\n\"getAtomApcAddress\",\n\"injectionToSentinelProcess\",\n\"koadicWmicStager\",\n\"maliciousEmpirePowershellScript\",\n\"maliciousNativeApiPowershellScript\",\n\"maliciousPowershellScript\",\n\"MetasploitNamedPipeImpersonation\",\n\"metasploitShellTCP\",\n\"pentestingFramework\",\n\"pentestingFrameworkHash\",\n\"pictrap\",\n\"ranForbiddenLogonScreen\",\n\"ransomware\",\n\"samSave\",\n\"SPNRequestFromPowershell\",\n\"terminateProtectedProcessAttempt\",\n\"syskeyQuery\",\n\"localMachineHiveSave\",\n\"brute\") dataSource.category = 'security'\n| group count=count() by indicator.category, indicator.name\n| sort -count",
      showBarsColumn: "false",

      title: "HIFI Indicators"
    }
  ],
  filters: [
    {
      facet: "endpoint.name",
      name: "Endpoint name",
    },
    {
      facet: "src.process.storyline.id",
      name: "Src storyline ID"
    }
  ],
  options: {layout: {locked: 1}},
  options: {},
  options: {layout: {locked: 1}}
},
{"tabName":"Process","graphs":[
  {
    graphStyle: "",
    query: "event.category = \"process\" dataSource.category = 'security'\n| group count=count() by src.process.name\n| sort -count",

    title: "TOP process spawners",
    layout: {
  h: 14,
  w: 15,
  x: 30,
  y: 0
},
    showBarsColumn: "true"
  },
  {
    graphStyle: "",
    query: "event.category = \"process\" dataSource.category = 'security'\n| group count=count() by tgt.process.name\n| sort -count",

    title: "TOP spawned processes",
    layout: {
  h: 14,
  w: 15,
  x: 45,
  y: 0
},
    showBarsColumn: "true"
  },
  {
    query: "event.category = \"process\" dataSource.category = 'security' dataSource.category = 'security'\n| let tgt_details = format(\"(%s) %s (%s) -----> %s\", src.process.user, src.process.name, src.process.storyline.id, tgt.process.cmdline)\n| group count = count() by tgt_details\n| columns count, tgt_details\n| sort -count",

    title: "Processes grouped  by target cmdlines",
    layout: {
  h: 29,
  w: 60,
  x: 0,
  y: 14
}
  },
  {
    graphStyle: "line",
    lineSmoothing: "straightLines",
    query: "event.category = \"process\" dataSource.category = 'security' dataSource.category = 'security'\n| group count=count() by src.process.user, timestamp = timebucket(\"1 minute\")\n\n| transpose src.process.user on timestamp",

    title: "Process timeline by user",
    yScale: "linear",
    layout: {
  h: 14,
  w: 30,
  x: 0,
  y: 0
}
  }
],
options: {layout: {locked: 1}},
options: {},
options: {layout: {locked: 1}},
filters: [
  {
    facet: "endpoint.name",
    name: "Endpoint name"
  },
  {
    facet: "src.process.storyline.id",
    name: "Src storyline ID"
  }
],
options: {},
options: {layout: {locked: 1}}
},
{"tabName":"File",
filters : [
    {
      facet: "endpoint.name",
      name: "Endpoint name"
    },
    {
      facet: "src.process.storyline.id",
      name: "Src storyline ID"
    }
  ],
graphs : [
    {
      query: "event.category = \"file\"\n| let windows_path_array = array_split(tgt.file.path, \"\\\\\\\\\")\n| let windows_directory_path_array = array_slice(windows_path_array, 0, len(windows_path_array)-1)\n| let windows_directory_path_string = array_to_string(windows_directory_path_array, \"\\\\\")\n\n| let unix_path_array = array_split(tgt.file.path, \"/\")\n| let unix_directory_path_array = array_slice(unix_path_array, 0, len(unix_path_array)-1)\n| let unix_directory_path_string = array_to_string(unix_directory_path_array, \"/\")\n\n| let directory_path_string = (endpoint.os = \"windows\") ? windows_directory_path_string : unix_directory_path_string\n\n| group distinct_sha1_count = estimate_distinct(tgt.file.sha1), distinct_name_count = estimate_distinct(tgt.file.path), distinct_path_count = estimate_distinct(directory_path_string) by endpoint.name, src.process.name, src.process.image.sha1, event.type, tgt.file.extension\n| sort -distinct_name_count, distinct_path_count, distinct_sha1_count\n| columns event.type, tgt.file.extension, distinct_sha1_count, distinct_name_count, distinct_path_count, src.process.name, src.process.image.sha1\n| limit 20",

      title: "Distinct file interactions by process",
      graphStyle: "",
      showBarsColumn: "false",
      layout: {
  h: 14,
  w: 38,
  x: 0,
  y: 12
}
    ,
    },
    {
      query: "event.category = \"file\" dataSource.category = 'security' \n| let windows_path_array = array_split(tgt.file.path, \"\\\\\\\\\")\n| let windows_directory_path_array = array_slice(windows_path_array, 0, len(windows_path_array)-1)\n| let windows_directory_path_string = array_to_string(windows_directory_path_array, \"\\\\\")\n| let windows_filename_string = windows_path_array.get(len(windows_path_array)-1)\n\n| let unix_path_array = array_split(tgt.file.path, \"/\")\n| let unix_directory_path_array = array_slice(unix_path_array, 0, len(unix_path_array)-1)\n| let unix_directory_path_string = array_to_string(unix_directory_path_array, \"/\")\n| let unix_filename_string = unix_path_array.get(len(unix_path_array)-1)\n\n| let directory_path_string = (endpoint.os = \"windows\") ? windows_directory_path_string : unix_directory_path_string\n| let filename_string = (endpoint.os = \"windows\") ? windows_filename_string : unix_filename_string\n\n| group distinct_path_count = estimate_distinct(directory_path_string) by endpoint.name, src.process.name, src.process.image.sha1, event.type, tgt.file.extension, filename_string\n| sort -distinct_path_count\n| columns src.process.name, event.type, distinct_path_count, filename_string\n| limit 10",

      title: "Possible ransom notes",
      graphStyle: "",
      showBarsColumn: "false",
      layout: {
  h: 12,
  w: 22,
  x: 38,
  y: 0
}
    },
    {
      query: "event.category = \"file\"\n| let windows_path_array = array_split(tgt.file.path, \"\\\\\\\\\")\n| let windows_directory_path_array = array_slice(windows_path_array, 0, len(windows_path_array)-1)\n| let windows_directory_path_string = array_to_string(windows_directory_path_array, \"\\\\\")\n\n| let unix_path_array = array_split(tgt.file.path, \"/\")\n| let unix_directory_path_array = array_slice(unix_path_array, 0, len(unix_path_array)-1)\n| let unix_directory_path_string = array_to_string(unix_directory_path_array, \"/\")\n\n| let directory_path_string = (endpoint.os = \"windows\") ? windows_directory_path_string : unix_directory_path_string\n\n| group count = count() by event.type, src.process.name, tgt.file.extension, directory_path_string\n| sort -count\n| columns count, event.type, src.process.name, tgt.file.extension, directory_path_string",

      title: "Top file event count by src process (use with panel filter)",
      layout: {
  h: 14,
  i: "2",
  minH: 3,
  minW: 6,
  w: 22,
  x: 38,
  y: 12
},
      graphStyle: "",
      showBarsColumn: "false"
    },
    {
      graphStyle: "line",
      layout: {
        h: 12,
        i: "0",
        minH: 3,
        minW: 6,
        w: 38,
        x: 0,
        y: 0
      },
      lineSmoothing: "straightLines",
      query: "event.category = 'file' dataSource.category = 'security'\n| group count = count() by timestamp = timebucket(\"1 minute\"), event.type\n| transpose event.type on timestamp",

      title: "File timeline",
      yScale: "linear"
    }
  ],
options: {layout: {locked: 1}},
options: {}
},
{"tabName":"Network","graphs":[
  {
    graphStyle: "line",
    lineSmoothing: "straightLines",
    query: "event.category = 'ip' dataSource.category = 'security'\n| group count = count() by timestamp = timebucket(\"1 minute\"), event.network.direction\n| transpose event.network.direction on timestamp",

    title: "IP connection timeline by direction",
    yScale: "linear",
    layout: {
  h: 14,
  w: 22,
  x: 0,
  y: 0
}
  },
  {
    graphStyle: "line",
    lineSmoothing: "straightLines",
    query: "event.category = 'ip' dataSource.category = 'security'\n| group count = count() by timestamp = timebucket(\"1 minute\"), event.network.connectionStatus\n| transpose event.network.connectionStatus on timestamp",

    title: "IP connection timeline by status",
    yScale: "linear",
    layout: {
  h: 14,
  w: 21,
  x: 22,
  y: 0
}
  },
  {
    query: "event.category = \"ip\" and event.network.direction = \"OUTGOING\" dataSource.category = 'security'\n| group distinct_dstip=estimate_distinct(dst.ip.address) by endpoint.name, src.ip.address, src.process.name, src.process.storyline.id\n| sort -distinct_dstip\n| columns endpoint.name, src.process.storyline.id, src.process.name, src.ip.address, distinct_dstip\n| limit 10",

    title: "Possible outbound network scan",
    layout: {
  h: 12,
  w: 50,
  x: 10,
  y: 28
},
    graphStyle: "",
    showBarsColumn: "false"
  },
  {
    query: "event.category = \"ip\" and event.network.direction = \"OUTGOING\" dataSource.category = 'security'\n| group distinct_dstport=estimate_distinct(dst.port.number)by dst.ip.address, endpoint.name, src.ip.address, src.process.name, src.process.storyline.id\n| sort -distinct_dstport\n| columns endpoint.name, src.process.storyline.id, src.process.name, src.ip.address, dst.ip.address, distinct_dstport\n| limit 10",

    title: "Possible outbound port scan",
    layout: {
  h: 12,
  w: 50,
  x: 10,
  y: 40
},
    graphStyle: "",
    showBarsColumn: "false"
  },
  {
    query: "event.category = \"ip\" and event.network.direction = \"INCOMING\" dataSource.category = 'security'\n| group distinct_dstip=estimate_distinct(dst.ip.address) by src.ip.address\n| sort -distinct_dstip\n| columns src.ip.address, distinct_dstip \n| limit 10",

    title: "Possible inbound net scan",
    layout: {
  h: 12,
  w: 10,
  x: 0,
  y: 28
},
    graphStyle: "",
    showBarsColumn: "false"
  },
  {
    query: "event.category = \"ip\" and event.network.direction = \"INCOMING\" dataSource.category = 'security'\n| group distinct_dstport=estimate_distinct(dst.port.number) by src.ip.address\n| sort -distinct_dstport\n| columns src.ip.address, distinct_dstport",

    title: "Possible inbound port scan",
    layout: {
  h: 12,
  w: 10,
  x: 0,
  y: 40
},
    graphStyle: "",
    showBarsColumn: "false"
  },
  {
    graphStyle: "",
    query: "event.category = 'ip' !isempty(dst.ip.address) dataSource.category = 'security'\n| group count = count() by dst.ip.address\n| sort -count",

    title: "Top destinations",
    showBarsColumn: "true",
    layout: {
  h: 14,
  w: 9,
  x: 43,
  y: 0
}
  },
  {
    graphStyle: "",
    query: "event.category = 'ip' !isempty(src.ip.address) dataSource.category = 'security'\n| group count = count() by src.ip.address\n| sort -count",

    title: "Top sources",
    layout: {
  h: 14,
  w: 8,
  x: 52,
  y: 0
},
    showBarsColumn: "true"
  },
  {
    query: "event.category = \"url\" and dataSource.category = 'security' dataSource.category = 'security' \n| group count = count() by url.address, src.process.name\n| sort -count\n| columns count, src.process.name, url.address",

    title: "URL count by process name",
    layout: {
  h: 14,
  w: 40,
  x: 20,
  y: 14
}
  },
  {
    query: "event.category = \"dns\" dataSource.category = 'security'\n| group count = count() by event.dns.request, src.process.name, src.process.storyline.id\n| sort -count\n| columns count, src.process.name, event.dns.request",

    title: "DNS count by process name",
    layout: {
  h: 14,
  w: 20,
  x: 0,
  y: 14
}
  }
],
options: {layout: {locked: 1}},
filters: [
  {
    facet: "endpoint.name",
    name: "Endpoint name"
  },
  {
    facet: "src.process.storyline.id",
    name: "Src storyline ID"
  }
],
options: {},
options: {layout: {locked: 1}},
options: {},
options: {layout: {locked: 1}}
},
{"tabName":"Indicators","graphs":[
  {
    graphStyle: "stacked_bar",
    query: "event.category = 'indicators' dataSource.category = 'security'\n| group count=count() by indicator.category\n| sort -count",

    title: "Indicator count by category",
    xAxis: "grouped_data",
    yScale: "linear",
    layout: {
  h: 14,
  w: 15,
  x: 0,
  y: 0
}
  },
  {
    query: "event.category = 'indicators' dataSource.category = 'security'\n| group count=count() by src.process.name, indicator.category, indicator.name, indicator.metadata\n| sort src.process.name, indicator.category, indicator.name, indicator.metadata\n| columns src.process.name, indicator.category, indicator.name, indicator.metadata",

    title: "Indicators with metadata",
    layout: {
  h: 28,
  w: 60,
  x: 0,
  y: 14
}
  },
  {
    query: "event.category = 'indicators' dataSource.category = 'security'\n| group count=count() by src.process.name, indicator.category, indicator.name\n| sort src.process.name, indicator.category, indicator.name\n| columns src.process.name, indicator.category, indicator.name",

    title: "Full indicator list",
    layout: {
  h: 14,
  w: 30,
  x: 30,
  y: 0
},
    graphStyle: "",
    showBarsColumn: "false"
  },
  {
    graphStyle: "",
    layout: {
  h: 14,
  w: 15,
  x: 15,
  y: 0
},
    query: "event.category = 'indicators' indicator.name contains (\"appLockerBypass\",\n\"authenticationPackageImp\",\n\"blockedMimikatz\",\n\"bloodHound\",\n\"getAtomApcAddress\",\n\"injectionToSentinelProcess\",\n\"koadicWmicStager\",\n\"maliciousEmpirePowershellScript\",\n\"maliciousNativeApiPowershellScript\",\n\"maliciousPowershellScript\",\n\"MetasploitNamedPipeImpersonation\",\n\"metasploitShellTCP\",\n\"pentestingFramework\",\n\"pentestingFrameworkHash\",\n\"pictrap\",\n\"ranForbiddenLogonScreen\",\n\"ransomware\",\n\"samSave\",\n\"SPNRequestFromPowershell\",\n\"terminateProtectedProcessAttempt\",\n\"syskeyQuery\",\n\"localMachineHiveSave\",\n\"brute\") dataSource.category = 'security'\n| group count=count() by indicator.category, indicator.name\n| sort -count",
    showBarsColumn: "false",

    title: "HIFI Indicators"
  }
],
filters: [
  {
    facet: "endpoint.name",
    name: "Endpoint name",
  },
  {
    facet: "src.process.storyline.id",
    name: "Src storyline ID"
  }
],
options: {layout: {locked: 1}},
options: {},
options: {layout: {locked: 1}}
},
{"tabName":"Lateral movement origin","graphs":[
  {
    query: "event.category = \"ip\" dataSource.category = 'security'\n| let unknown_ip = src.ip.address\n| let potential_hostname = endpoint.name\n| group count = count() by potential_hostname, unknown_ip\n| columns unknown_ip, potential_hostname",

    title: "Retrieve endpoint name from IP events",
    layout: {
  h: 14,
  i: "0",
  minH: 3,
  minW: 6,
  w: 30,
  x: 0,
  y: 0
},
    graphStyle: "",
    showBarsColumn: "false"
  },
  {
    query: "event.category = \"dns\" dataSource.category = 'security'\n| let unknown_ip = event.dns.response\n| let potential_hostname = event.dns.request\n| group count = count() by unknown_ip, potential_hostname\n| columns unknown_ip, potential_hostname",

    title: "Retrieve endpoint name from DNS petitions",
    graphStyle: "",
    showBarsColumn: "false",
    layout: {
  h: 14,
  i: "1",
  minH: 3,
  minW: 6,
  w: 60,
  x: 0,
  y: 14
}
  },
  {
    query: "event.category = \"logins\" event.login.userName contains \"$\" dataSource.category = 'security'\n| let unknown_ip = src.endpoint.ip.address\n| let potential_hostname = event.login.userName\n| group count = count() by potential_hostname, unknown_ip\n| columns unknown_ip, potential_hostname",

    title: "Retrieve endpoint name from login events",
    graphStyle: "",
    showBarsColumn: "false",
    layout: {
  h: 14,
  i: "2",
  minH: 3,
  minW: 6,
  w: 30,
  x: 30,
  y: 0
}
  }
],
filters: [
],
options: {layout: {locked: 1}}
}],
  configType: "TABBED"
 }
