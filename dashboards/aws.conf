{
  duration: "12h"
  tabs: [
    {
      "tabName": "Lambda",
      graphs: [
        {
          breakdownFacet: "lambda",
          graphStyle: "line",
          plots: [
            {
              facet: "rate",
              filter: "lambda = *",
              label: "rate"
            }
          ],
          title: "Events By Lambda"
        }, {
          breakdownFacet: "lambda",
          graphStyle: "line",
          plots: [
            {
              facet: "rate",
              filter: "status_code=500",
              label: "rate"
            }
          ],
          title: "Errors by lambda"
        }
      ]
    }, {
      "tabName": "Cloudwatch",
      "graphs": [
        {
          query: "action='ACCEPT'\t\n|limit 100 |columns dstaddr, srcaddr, srcport, dstport, srcport, version, account-id, interface-id, protocol, packets, bytes, start, end, action, timestamp\n",
          title: "VPC Flow Log",
          
          layout: {
            h: 14,
            w: 29,
            x: 0,
            y: 14
          }
        }, {
          query: "action='ACCEPT' | limit 10  | sort -timestamp | group count() by dstaddr, timestamp, action, srcaddr, srcport, dstport, srcport",
          title: "Connections",
          
          layout: {
  h: 14,
  i: "1",
  minH: 3,
  minW: 6,
  w: 31,
  x: 29,
  y: 14
},
          graphStyle: "",
          showBarsColumn: "false"
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
          query: "metric='CPUUtilization' \n| group max(value) by timestamp = timebucket(\"1m\")",
          title: "CloudWatch Metrics CPUUtilization ",
          yScale: "linear",
          
          layout: {
            h: 14,
            w: 20,
            x: 0,
            y: 0
          }
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
          query: "metric='NetworkIn' \n| group max(value) by timestamp = timebucket(\"1m\")",
          title: "CloudWatch Metrics NetworkIn",
          yScale: "linear",
          
          layout: {
            h: 14,
            w: 20,
            x: 40,
            y: 0
          }
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
          query: "metric='NetworkOut' \n| group max(value) by timestamp = timebucket(\"1m\")",
          title: "CloudWatch Metrics NetworkOut",
          yScale: "linear",
          
          layout: {
            h: 14,
            w: 20,
            x: 20,
            y: 0
          }
        }, {
          query: "logfile contains \"/var/log\" |limit 10 ",
          title: "CloudWatch Agent Logs",
          
          layout: {
            h: 14,
            i: "5",
            minH: 3,
            minW: 6,
            w: 60,
            x: 0,
            y: 28
          },
          graphStyle: "",
          showBarsColumn: "false"
        },
      ]
    }, {
      "tabName": "S3",
      "graphs": [
        {
          graphStyle: "",
          query: "source contains \"s3\" | limit 20\n",
          showBarsColumn: "false",
          title: "Bucket Data",
          layout: {
            h: 14,
            w: 40,
            x: 0,
            y: 0
          }
        }, {
          query: "dataset contains \"access\"\n| limit 20\n| columns message",
          title: "S3 AccessLog",
          layout: {
            h: 14,
            w: 60,
            x: 0,
            y: 14
          }
        }, {
          query: "dataset contains \"access\"\n| limit 50\n| group count() by uriPath\n| parse \"\\/$path$\" from uriPath\n| group count() by path",
          title: "Path Access",
          graphStyle: "pie",
          maxPieSlices: 10,
          layout: {
            h: 14,
            w: 20,
            x: 40,
            y: 0
          }
        }
      ]
    }, {
      "tabName": "EC2",
      "graphs": [ // CPU load.
        // loadavg.5min is also available, but we leave it out here as it adds to clutter.
        {
          "facet": "value",
          "label": "CPU load average",
          "plots": [
            {
              "filter": "$source='tsdb'  metric='proc.loadavg.1min'",
              "label": "1 min avg"
            }, {
              "filter": "$source='tsdb'  metric='proc.loadavg.15min'",
              "label": "15 min avg"
            }
          ],
        
        },
        
        // CPU graph
        // Other CPU types that we're not displaying (to minimize clutter): idle, irq, guest, guest_nice
        {
          facet: "value",
          label: "CPU usage",
          graphStyle: "stacked",
          plots: [
            {
              "filter": "$source='tsdb'  metric='proc.stat.cpu_rate' type='user'",
              "label": "user"
            }, {
              "filter": "$source='tsdb'  metric='proc.stat.cpu_rate' type='system'",
              "label": "system"
            }, {
              "filter": "$source='tsdb'  metric='proc.stat.cpu_rate' type='nice'",
              "label": "nice"
            }, {
              "filter": "$source='tsdb'  metric='proc.stat.cpu_rate' type='iowait'",
              "label": "iowait"
            }
          ],
        
        },
        
        // Disk usage. Note, this only covers the '/' mount point. Feel free to customize the graph to include other mount points.
        {
          facet: "value",
          label: "Disk usage (KB)",
          graphStyle: "stacked",
          plots: [
            {
              "filter": "$source='tsdb'  metric='df.1kblocks.free' mount='/'",
              "label": "Free blocks (root volume)"
            }, {
              "filter": "$source='tsdb'  metric='df.1kblocks.used' mount='/'",
              "label": "Used blocks (root volume)"
            }
          ],
        
        },
        
        // Used and free inodes. Note that we don't specify a stacked graph here, because that doesn't work well for sparse data,
        // and inode counts are only logged every 5 minutes.
        {
          facet: "value",
          label: "Disk usage (inodes)",
          plots: [
            {
              "filter": "$source='tsdb'  metric='df.inodes.free' mount='/'",
              "label": "Free inodes (root volume)"
            }, {
              "filter": "$source='tsdb'  metric='df.inodes.used' mount='/'",
              "label": "Used inodes (root volume)"
            }
          ],
        
        },
        
        // Memory usage. We omit swapcached and swapfree to minimize clutter.
        {
          facet: "value",
          label: "Memory usage (KB)",
          graphStyle: "stacked",
          plots: [
            {
              "filter": "$source='tsdb'  metric='proc.meminfo.memfree' ",
              "label": "Free"
            }, {
              "filter": "$source='tsdb'  metric='proc.meminfo.memtotal' ",
              "label": "Total"
            }, {
              "filter": "$source='tsdb'  metric='proc.meminfo.swaptotal' ",
              "label": "Swap"
            }, {
              "filter": "$source='tsdb'  metric='proc.meminfo.buffers' ",
              "label": "Buffers"
            }
          ],
        
        },
        
        // Network usage
        {
          "facet": "value",
          "label": "Network bandwidth",
          "graphStyle": "stacked",
          "plots": [
            {
              "filter": "$source='tsdb'  metric='proc.net.bytes_rate' direction='in'",
              "label": "Received bytes/sec"
            }, {
              "filter": "$source='tsdb'  metric='proc.net.bytes_rate' direction='out'",
              "label": "Sent bytes/sec"
            }
          ],
        
        },
        
        // Disk request rates
        {
          "facet": "value",
          "label": "Disk request rates",
          "plots": [
            {
              "filter": "$source='tsdb'  metric='iostat.part.read_requests_rate'",
              "label": "Reads/s"
            }, {
              "filter": "$source='tsdb'  metric='iostat.part.write_requests_rate'",
              "label": "Writes/s"
            }
          ],
        
        },
        
        // Disk request bandwidth
        {
          "facet": "sumPerSecond(value)",
          "label": "Disk request bandwidth",
          "plots": [
            {
              "filter": "sumPerSecond(value where $source='tsdb'  metric='iostat.disk.write_sectors_rate') * .00048828125",
              "label": "Write MB/s"
            }, {
              "filter": "sumPerSecond(value where $source='tsdb'  metric='iostat.disk.read_sectors_rate') * .00048828125",
              "label": "Read MB/s"
            }
          ],
        
        },
        
        // Disk latency
        {
          "facet": "value",
          "label": "Average disk request latency (ms)",
          "plots": [
            {
              "filter": "$source='tsdb'  metric='iostat.part.msec_read_rate'",
              "label": "Read"
            }, {
              "filter": "$source='tsdb'  metric='iostat.part.msec_write_rate'",
              "label": "Write"
            }
          ],
        
        }
      ]
    }, {
      "tabName": "VPC",
      "graphs": [
        {
          layout: {
            h: 14,
            i: "0",
            minH: 3,
            minW: 6,
            w: 29,
            x: 0,
            y: 14
          },
          query: "action='ACCEPT'  \t\n|columns dstaddr, srcaddr, srcport, dstport, srcport, version, account-id, interface-id, protocol, packets, bytes, start, end, action, timestamp\n",
          
          title: "VPC Flow Log"
        }, {
          graphStyle: "",
          layout: {
            h: 14,
            i: "1",
            minH: 3,
            minW: 6,
            w: 31,
            x: 29,
            y: 14
          },
          query: "action='ACCEPT' | sort -timestamp | limit 10 | group count() by dstaddr, timestamp, action, srcaddr, srcport, dstport, srcport",
          showBarsColumn: "false",
          
          title: "Connections"
        }
      ]
    }, {
      "tabName": "EKS",
      "graphs": [
      ]
    }
  ],
  configType: "TABBED",
  description: ""
}
