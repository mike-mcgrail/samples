{
  graphs: [
    {
      query: "| union\n(i.scheme='edr' //endpoint.name contains:anycase \"josephp-win10-storylines\" //meta.event.name contains:anycase (\"malicious\", \"scripts\", \"behavioral\")\n| group eventcount = count() \n| columns eventcount, provider.type=\"EDR Events\"),\n(serverHost='XDR_Test' raw.actor.alternateId contains:anycase \"f0rrester.com\" OR raw.sendingIP = \"209.85.218.44\" OR raw.targets contains:anycase \"f0rrester.com\"\n| group eventcount = count() by provider.type\n| sort -eventcount)",
      title: "Cross-Platform Event Counts (JPOYNER)",
      layout: {
  h: 13,
  w: 18,
  x: 0,
  y: 5
},
      graphStyle: ""
    },
    {
      query: "i.scheme='edr' NOT(endpoint.name contains:anycase ('aks-agentpool','pool','k8s'))\n| group eventcount = count() by endpoint.name\n| columns endpoint.name, eventcount\n| sort -eventcount\n| limit 20",
      title: "Top 20 Endpoints by EDR Volume",
      layout: {
  h: 19,
  w: 20,
  x: 18,
  y: 9
}
    },
    {
      query: "i.scheme='edr' NOT(endpoint.name contains:anycase ('aks-agentpool','pool','k8s')) NOT(meta.event.name contains:anycase ('BEHAVIORALINDICATORS','DUPLICATEPROCESS','TCPV4','DNS','PROCESSEXIT','WINLOGOFF','GROUPCREATION','REGVALUEDELETE','HTTP','MODULELOAD'))\n| group eventcount = count() by endpoint.name, meta.event.name\n| columns endpoint.name, eventcount, meta.event.name\n| sort -eventcount\n| limit 200\n| transpose meta.event.name",
      title: "EDR Event Volume by Endpoint & Type",
      graphStyle: "",
      layout: {
  h: 19,
  w: 60,
  x: 0,
  y: 28
}
    },
    {
      query: "logfile contains 'MWG.log2' serverHost='XDR_Test' \n| group eventcount = count(), totalbytes_sent = sum(bytes_sent), totalbytes_rcvd = sum(bytes_rcvd) by userName\n| let total_bytes = totalbytes_sent+totalbytes_rcvd\n| columns userName, eventcount, totalbytes_sent, totalbytes_rcvd, total_bytes\n| sort -total_bytes\n| limit 20",
      title: "Web Gateway Transfer Volumes by User",
      graphStyle: "",
      layout: {
  h: 17,
  w: 30,
  x: 0,
  y: 47
}
    ,
    },
    {
      graphStyle: "number",
      query: "i.scheme='edr' \n| group EDR_Endpoints = estimate_distinct(agent.uuid)  \n| columns EDR_Endpoints",
      title: "Total EDR Endpoints",
      layout: {
  h: 5,
  w: 18,
  x: 0,
  y: 0
}
    },
    {
      graphStyle: "donut",
      maxPieSlices: 10,
      query: "i.scheme='edr' \n| group endpoint_type = count() by endpoint.os \n| columns endpoint.os, endpoint_type",
      title: "Endpoint OS Distribution",
      layout: {
  h: 9,
  i: "5",
  minH: 3,
  minW: 6,
  w: 22,
  x: 38,
  y: 0
}
    },
    {
      graphStyle: "donut",
      maxPieSlices: 10,
      query: "i.scheme='edr' \n| group endpoint_types = count() by endpoint.type \n| columns endpoint.type, endpoint_types",
      title: "Endpoint Types",
      layout: {
  h: 9,
  w: 20,
  x: 18,
  y: 0
}
    },
    {
      query: "| join \nedr = (i.scheme='edr' src.process.user = * NOT(src.process.user contains:anycase ('SYSTEM','AUTHORITY','Système','Nätverkstjänst','SERVICE'))\n| group eventcount = count() by src.process.user\n| parse \"^([^\\\\\\\\]+\\\\\\\\)$n$\" from src.process.user\n| let name = n ? n : src.process.user\n| columns src.process.user, name, eventcount\n| sort -eventcount\n| limit 100),\nswg = (logfile contains 'MWG.log2' serverHost='XDR_Test' userName NOT(isblank) \n| group eventcount = count(), totalbytes_sent = sum(bytes_sent), totalbytes_rcvd = sum(bytes_rcvd) by userName\n| let total_bytes = totalbytes_sent+totalbytes_rcvd\n| columns name = userName, eventcount, totalbytes_sent, totalbytes_rcvd, total_bytes\n| sort -total_bytes\n| limit 100)\non name",
      title: "EDR + SWG Join",
      layout: {
  h: 17,
  w: 30,
  x: 30,
  y: 47
}
    },
    {
      query: "endpoint.name contains (\"ADELLDC2-16\") dst.ip.address = *\n| group count(), querystart() by dst.ip.address, timestamp = timebucket(\"24h\") \n",
      title: "Baseline IP Addresses",
      layout: {
  h: 14,
  w: 20,
  x: 0,
  y: 64
}
    },
  ]
}
