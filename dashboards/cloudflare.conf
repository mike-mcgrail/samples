{
  tabs: [{"tabName":"HTTP Requests",
graphs : [
    {
      breakdownFacet: "OriginResponseStatus",
      graphStyle: "stacked",
      plots: [
        {
          filter: "cloudflare=*",
          label: "Rate"
        }
      ],
      title: "Requests by status",
      lineSmoothing: "straightLines",
      layout: {
  h: 14,
  w: 20,
  x: 0,
  y: 0
}
    },
    {
      breakdownFacet: "ClientRequestHost",
      graphStyle: "line",
      plots: [
        {
          filter: "cloudflare=*",
          label: "Rate"
        }
      ],
      title: "Requests by host",
      lineSmoothing: "straightLines",
      layout: {
  h: 14,
  w: 20,
  x: 20,
  y: 0
}
    },
    {
      breakdownFacet: "EdgeResponseStatus",
      graphStyle: "line",
      plots: [
  {
    filter: "EdgeResponseStatus > 0 cloudflare=*",
    label: "Rate"
  }
],
      title: "Cloudflare Responses",
      lineSmoothing: "straightLines",
      layout: {
  h: 16,
  w: 60,
  x: 0,
  y: 28
}
    },
    {
      barWidth: "auto",
      breakdownFacet: "ClientCountry",
      graphStyle: "line",
      plots: [
        {
          filter: "cloudflare=* ClientCountry=*",
          label: "Rate"
        }
      ],
      title: "Requests by country",
      layout: {
  h: 14,
  w: 20,
  x: 40,
  y: 14
}
    },
    {
      breakdownFacet: "ClientIP",
      graphStyle: "line",
      plots: [
        {
          facet: "rate",
          filter: "cloudflare=* ClientIP = *",
          label: "rate"
        }
      ],
      title: "Top IPs",
      yScale: "linear",
      layout: {
  h: 14,
  w: 20,
  x: 0,
  y: 14
},
      lineSmoothing: "straightLines"
    },
    {
      graphStyle: "pie",
      maxPieSlices: 10,
      query: "cloudflare=* ClientIP = * dataSource.category = 'security' | group Count=count() by ClientIP | sort -Count | limit 10",
      title: "Top 10 IPs",
      layout: {
  h: 14,
  w: 20,
  x: 20,
  y: 14
}
    },
    {
      barWidth: "auto",
      graphStyle: "stacked_bar",
      lineSmoothing: "straightLines",
      plots: [
        {
          color: "",
          facet: "rate",
          filter: "cloudflare=* ClientRequestUserAgent=*",
          label: "count"
        }
      ],
      title: "Requests by UserAgent",
      breakdownFacet: "ClientRequestUserAgent",
      layout: {
  h: 14,
  w: 20,
  x: 0,
  y: 44
}
    },
    {
      barWidth: "auto",
      graphStyle: "stacked_bar",
      lineSmoothing: "straightLines",
      plots: [
        {
          color: "",
          facet: "rate",
          filter: "cloudflare=* ClientRequestMethod=*",
          label: "ClientRequestMethod"
        }
      ],
      title: "Requests by Method",
      breakdownFacet: "ClientRequestMethod",
      layout: {
  h: 14,
  w: 20,
  x: 20,
  y: 44
}
    },
    {
      barWidth: "auto",
      graphStyle: "stacked_bar",
      lineSmoothing: "straightLines",
      plots: [
        {
          color: "#96cf58",
          facet: "rate",
          filter: "cloudflare=* ClientRefererHost=*",
          label: "ClientRefererHost"
        }
      ],
      title: "Requestes by Referer",
      breakdownFacet: "ClientRefererHost",
      layout: {
  h: 14,
  w: 20,
  x: 40,
  y: 44
}
    },
    {
      graphStyle: "line",
      lineSmoothing: "smoothCurves",
      plots: [
        {
          color: "#7384df",
          facet: "rate",
          filter: "cloudflare=* ClientASNDescription=*",
          label: "count"
        }
      ],
      title: "Request by ASN",
      breakdownFacet: "ClientASNDescription",
      layout: {
  h: 14,
  w: 20,
  x: 0,
  y: 58
}
    ,
    },
    {
      graphStyle: "",
      query: "cloudflare=* \n| filter Action!=\"block\" \n| parse \"$u{regex=^[^:]*}$\" from ClientRequestHost \n|let URL= u+ClientRequestPath \n| group Requests = count() by ClientRequestMethod, URL \n| sort -Requests | limit 10",
      showBarsColumn: "false",
      title: "Top 10 requested URLs",
      layout: {
  h: 14,
  w: 20,
  x: 40,
  y: 0
}
    ,
    }
  ]},
{"tabName":"WAF","graphs":[
  {
    graphStyle: "",
    query: "serverHost = 'cloudflare' and Kind = 'firewall' and Action = 'block'\n| let RuleGroup = MetadataGroup\n| let RuleName = MetadataRule_message\n| let Severity = severity\n| columns Datetime, ClientIP, ClientRequestMethod, ClientRequestHost, ClientRequestPath, Action, ClientRequestProtocol, ClientRequestScheme, RuleGroup, RuleName, RayID, RuleID, Severity\n| sort -Datetime",
    showBarsColumn: "false",
    title: "WAF - Blocks Table",
    layout: {
  h: 14,
  w: 30,
  x: 0,
  y: 0
}
  },
  {
    graphStyle: "pie",
    maxPieSlices: 10,
    query: "serverHost = 'cloudflare' and Kind = 'firewall' and Action = 'block'\n| group Count = count() by MetadataRule_message\n| sort -Count\n| limit 10",
    title: "WAF Blocks by Rule",
    layout: {
  h: 14,
  w: 30,
  x: 30,
  y: 0
}
  },
  {
    graphStyle: "",
    query: "serverHost = 'cloudflare' and Kind = 'firewall' and Action = 'block'\n| filter MetadataRule_message!=null\n| let URL = ClientRequestHost+ClientRequestPath+ClientRequestQuery\n| let Rule = MetadataRule_message\n| let RuleGroup = MetadataGroup\n| let Method=ClientRequestMethod\n| group Requests=count() by Method, RuleGroup, Rule, URL\n| sort -Requests\n| limit 20",
    showBarsColumn: "false",
    title: "Top blocked requests by Rule",
    layout: {
  h: 14,
  w: 30,
  x: 0,
  y: 14
}
  ,
  }
]}],
  configType: "TABBED"
 }
