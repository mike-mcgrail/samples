// Dashboard to display basic system metrics


{
  "duration" : "4h",

  "parameters" : [ {
    "name" : "serverHost",
    "values" : [ {"label": "Average (all servers)", "value": "*"}, "__serverHostsQ" ] // this token indicates that all known hosts should be available as choices
  } ],

  autoPercentiles: false,

  "graphs" : [

    // CPU load.
    // loadavg.5min is also available, but we leave it out here as it adds to clutter.
    {
      facet: "value",
      label: "CPU load average",
      layout: {
  h: 9,
  w: 10,
  x: 0,
  y: 0
},
      plots: [
        {
          filter: "$source='tsdb' $serverHost=#serverHost# metric='proc.loadavg.1min' ",
          label: "1 min avg"
        },
        {
          filter: "$source='tsdb' $serverHost=#serverHost# metric='proc.loadavg.15min' ",
          label: "15 min avg"
        }
      ]
    },
	
	// CPU graph
  // Other CPU types that we're not displaying (to minimize clutter): idle, irq, guest, guest_nice
	{
  columnSpan: 0,
  graphStyle: "stacked",
  layout: {
  h: 18,
  w: 28,
  x: 10,
  y: 0
},
  plots: [
    {
      color: "#00BDD6",
      facet: "mean(value)",
      filter: "$source='tsdb' $serverHost=#serverHost# metric='proc.stat.cpu_rate' type='user'",
      label: "user"
    },
    {
      color: "#FD5821",
      facet: "mean(value)",
      filter: "$source='tsdb' $serverHost=#serverHost# metric='proc.stat.cpu_rate' type='system'",
      label: "system"
    },
    {
      color: "#3E51B5",
      facet: "mean(value)",
      filter: "$source='tsdb' $serverHost=#serverHost# metric='proc.stat.cpu_rate' type='nice'",
      label: "nice"
    },
    {
      color: "#D33682",
      facet: "mean(value)",
      filter: "$source='tsdb' $serverHost=#serverHost# metric='proc.stat.cpu_rate' type='iowait'",
      label: "iowait"
    }
  ],
  rowSpan: 0,
  title: "CPU usage"
},
	
	// Disk usage. Note, this only covers the '/' mount point. Feel free to customize the graph to include other mount points.
	{
  facet: "value",
  graphStyle: "stacked",
  label: "Disk usage (KB)",
  layout: {
  h: 9,
  w: 22,
  x: 38,
  y: 0
},
  plots: [
    {
      filter: "$source='tsdb' $serverHost=#serverHost# metric='df.1kblocks.free' mount='/'",
      label: "Free blocks (root volume)"
    },
    {
      filter: "$source='tsdb' $serverHost=#serverHost# metric='df.1kblocks.used' mount='/'",
      label: "Used blocks (root volume)"
    }
  ]
},
	
	// Used and free inodes. Note that we don't specify a stacked graph here, because that doesn't work well for sparse data,
	// and inode counts are only logged every 5 minutes.
  {
    facet: "value",
    label: "Disk usage (inodes)",
    layout: {
  h: 8,
  w: 10,
  x: 0,
  y: 9
},
    plots: [
      {
        filter: "$source='tsdb' $serverHost=#serverHost# metric='df.inodes.free' mount='/'",
        label: "Free inodes (root volume)"
      },
      {
        filter: "$source='tsdb' $serverHost=#serverHost# metric='df.inodes.used' mount='/'",
        label: "Used inodes (root volume)"
      }
    ]
  },
  
	// Memory usage. We omit swapcached and swapfree to minimize clutter. 
	{
  facet: "value",
  graphStyle: "stacked",
  label: "Memory usage (KB)",
  layout: {
  h: 8,
  w: 10,
  x: 10,
  y: 18
},
  plots: [
    {
      filter: "$source='tsdb' $serverHost=#serverHost# metric='proc.meminfo.memfree' ",
      label: "Free"
    },
    {
      filter: "$source='tsdb' $serverHost=#serverHost# metric='proc.meminfo.memtotal' ",
      label: "Total"
    },
    {
      filter: "$source='tsdb' $serverHost=#serverHost# metric='proc.meminfo.swaptotal' ",
      label: "Swap"
    },
    {
      filter: "$source='tsdb' $serverHost=#serverHost# metric='proc.meminfo.buffers' ",
      label: "Buffers"
    }
  ]
},
	
	// Network usage
	{
  facet: "value",
  graphStyle: "stacked",
  label: "Network bandwidth",
  layout: {
  h: 9,
  w: 22,
  x: 38,
  y: 9
},
  plots: [
    {
      filter: "$source='tsdb' $serverHost=#serverHost# metric='proc.net.bytes_rate' direction='in'",
      label: "Received bytes/sec"
    },
    {
      filter: "$source='tsdb' $serverHost=#serverHost# metric='proc.net.bytes_rate' direction='out'",
      label: "Sent bytes/sec"
    }
  ]
},
	
	// Disk request rates
	{
  facet: "value",
  label: "Disk request rates",
  layout: {
  h: 8,
  w: 10,
  x: 0,
  y: 17
},
  plots: [
    {
      filter: "$source='tsdb' $serverHost=#serverHost# metric='iostat.part.read_requests_rate'",
      label: "Reads/s"
    },
    {
      filter: "$source='tsdb' $serverHost=#serverHost# metric='iostat.part.write_requests_rate'",
      label: "Writes/s"
    }
  ]
},

  // Disk request bandwidth
  {
    facet: "sumPerSecond(value)",
    label: "Disk request bandwidth",
    layout: {
  h: 8,
  w: 10,
  x: 31,
  y: 18
},
    plots: [
      {
        filter: "sumPerSecond(value where $source='tsdb' $serverHost=#serverHost# metric='iostat.disk.write_sectors_rate') * .00048828125",
        label: "Write MB/s"
      },
      {
        filter: "sumPerSecond(value where $source='tsdb' $serverHost=#serverHost# metric='iostat.disk.read_sectors_rate') * .00048828125",
        label: "Read MB/s"
      }
    ]
  },

	// Disk latency
	{
  facet: "value",
  label: "Average disk request latency (ms)",
  layout: {
  h: 8,
  w: 10,
  x: 20,
  y: 18
},
  plots: [
    {
      filter: "$source='tsdb' $serverHost=#serverHost# metric='iostat.part.msec_read_rate'",
      label: "Read"
    },
    {
      filter: "$source='tsdb' $serverHost=#serverHost# metric='iostat.part.msec_write_rate'",
      label: "Write"
    }
  ]
},
	
	// Other disk metrics we're not currently displaying: read_merged, write_merged 
	]
}
