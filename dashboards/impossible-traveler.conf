{
  graphs: [
    {
      query: "dataSource.name = 'Okta' src_endpoint.ip = * actor.user.name = *\n| group first_ip = oldest(src_endpoint.ip), last_ip = newest(src_endpoint.ip) by actor.user.name\n| filter first_ip != last_ip                           // if the user's IP hasn't changed then we don't need to check it.\n| let first_location = geo_ip_location(first_ip),\n      last_location = geo_ip_location(last_ip), \n      first_country=geo_ip_country(first_ip), \n      last_country=geo_ip_country(last_ip),\n      first_city = geo_ip_city(first_ip),\n      last_city = geo_ip_city(last_ip)\n| filter (first_location != last_location )     // compute if we have different locations\n| let distance_traveled = geo_distance(first_location, last_location, 'mile')\n| let hours=(queryend() - querystart())/1000000000/60/60\n| let velocity_mph = distance_traveled / hours\n| sort  -distance_traveled",
      title: "Impossible Traveler [Okta] - Different Starting and Ending IP Addresses",
      graphStyle: "",
      showBarsColumn: "false",
      layout: {
  h: 16,
  w: 53,
  x: 0,
  y: 16
}
    ,
    },
    {
      graphStyle: "",
      query: "| join \n  a = (dataSource.name = 'Okta' src_endpoint.ip = * actor.user.name = * | columns timestamp, user=actor.user.name, ip=src_endpoint.ip | group timestamp=min(timestamp) by user, ip | sort user, timestamp | let joinId=running_sum(1)+1), \n  b = (dataSource.name = 'Okta' src_endpoint.ip = * actor.user.name = * | columns timestamp, user=actor.user.name, ip=src_endpoint.ip | group timestamp=min(timestamp) by user, ip | sort user, timestamp | let joinId=running_sum(1))\n  on joinId\n| sort joinId\n| filter a.user == b.user\n| let distance_a_to_b = geo_distance(geo_ip_location(a.ip), geo_ip_location(b.ip),'mile')    // calculate distance\n| filter distance_a_to_b > 500                                                               // 500 miles can easily be explained with network roaming\n| let time_delta_hours=abs((b.timestamp - a.timestamp)/1000000000/60/60)                     // calculate hourly difference\n| let velocity_mph=distance_a_to_b/time_delta_hours                                          // calculate user's velocity\n| filter velocity_mph > 1000                                                                 // filter out acceptable velocities\n| sort -distance_a_to_b\n| let first_location = geo_ip_location(a.ip),\n      last_location = geo_ip_location(b.ip), \n      first_country=geo_ip_country(a.ip), \n      last_country=geo_ip_country(b.ip),\n      first_city = geo_ip_city(a.ip),\n      last_city = geo_ip_city(b.ip)\n| columns user= a.user, first_ip = a.ip, next_ip = b.ip, first_location, last_location, first_country, last_country, first_city, last_city, time_delta_hours, distance_traveled= distance_a_to_b, velocity_mph, first_timestamp=a.timestamp, next_timestamp=b.timestamp",
      showBarsColumn: "false",
      title: "Impossible Traveler [Okta]  - Sequential IP Addresses over time",
      layout: {
  h: 16,
  w: 53,
  x: 0,
  y: 0
}
    }
  ]
 }
