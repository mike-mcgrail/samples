{
  parameters: [
    { name: "host", defaultValue: "https://usea1-purple.sentinelone.net" }
  ],
  "tabs":[{
         "tabName":"Overview",
         "graphs":[
            {
               "graphStyle":"markdown",
               "honeyCombColor":{
                  "hover":"#8ED4FB",
                  "label":"Blue",
                  "value":"#0998E7"
               },
               "honeyCombGroupBy":"",
               "honeyCombLinkTo":"",
               "honeyCombThresholds":[
                  "0",
                  "25",
                  "50",
                  "75"
               ],
               "layout":{
  h: 22,
  w: 8,
  x: 0,
  y: 6
},
               "markdown":"## S1:.\n[Live Incidents](https://usea1-purple.sentinelone.net/incidents/threats)   \n[Endpoints](https://usea1-purple.sentinelone.net/sentinels/devices/workstations)   \n[Policy](https://usea1-purple.sentinelone.net/sentinels/policy/workstations/default)  \n[KB](https://support.sentinelone.com/hc/en-us/categories/360002507673-Knowledge-Base-and-Documents)  \n[New Ticket](https://support.sentinelone.com/hc/en-us/requests/new)  \n[Escalation]( https://www.sentinelone.com/global-services/vigilance-respond/)   \n[Blog](https://www.sentinelone.com/blog/)   \n[S1-community-GitHub](https://github.com/s1community)   \n               \n## Internal:.\n[Duty Schedule](http://#)  \n[Infosec Home](htp://#)  \n[Contact List](http://#)   \n[Service Desk](http://#)   \n[SOC Wiki](http://#)   \n\n## Me/Reference:.\n[My-GitHub](https://github.com/)    \n[MITRE ATT&CK](https://attack.mitre.org)   \n[DFIR Report](https://thedfirreport.com/) \n[S1 Slides](https://docs.google.com/presentation/d/1zRrjlHl68GIX1-Lbrc0iLH_WLB-DbFAp/edit#slide=id.p1) \n[S1 Ref Deck](https://docs.google.com/presentation/d/18AfywF29DIA9xPQBz_8DJtw2UOrDZXHmCTj5nM0UrOU/edit#slide=id.g8c3ed54d67_10_61)",
               "query":"",
               "title":"Resources"
            },
            {
               "barWidth":"auto",
               "breakdownFacet":"indicator.category",
               "graphStyle":"stacked_bar",
               "lineSmoothing":"straightLines",
               "plots":[
                  {
                     "facet":"",
                     "filter":"event.type = 'Behavioral Indicators' indicator.category = * ",
                     "label":"rate"
                  }
               ],
               "title":"Indicator Breakdown",
               "layout":{
  h: 22,
  w: 40,
  x: 8,
  y: 6
}
            },
            {
               "graphStyle":"markdown",
               "markdown":"![](https://i2.wp.com/cybanetix.com/wp-content/uploads/2018/06/sentinelone-logo-white.png?resize=475%2C95&ssl=1)",
               "query":"",
               "title":" ",
               "layout":{
  h: 6,
  w: 24,
  x: 0,
  y: 0
}
            },
            {
              graphStyle: "number",
              layout: {
  h: 6,
  w: 16,
  x: 24,
  y: 0
},
              query: "event.category = 'indicators'  | group Unique = estimate_distinct(agent.uuid)",
              title: "Endpoints with Threat Indicators",
            },
            {
              graphStyle: "number",
              layout: {
  h: 6,
  w: 10,
  x: 40,
  y: 0
},
              query: "event.type = * | group Unique = estimate_distinct(agent.uuid)",
              title: "Total Endpoints"
            },
            {
              graphStyle: "markdown",
              markdown: "## Playbook: Ransomware\n\nAssign steps to individuals or teams to work concurrently, when possible; this playbook is not purely sequential. Use your best judgment.\n\n### Investigate\n\n1. **Determine the type** of ransomware (_i.e.,_ what is the family, variant, or flavor?)[<sup>[1]<\/sup>](#ransomware-playbook-ref-1)\n    1. Find any related messages.  Check:\n        * graphical user interfaces (GUIs) for the malware itself\n        * text or html files, sometimes opened automatically after encryption\n        * image files, often as wallpaper on infected systems\n        * contact emails in encrypted file extensions\n        * pop-ups after trying to open an encrypted file\n        * voice messages\n    1. Analyze the messages looking for clues to the ransomware type:\n        * ransomware name\n        * language, structure, phrases, artwork\n        * contact email\n        * format of the user id\n        * ransom demand specifics (_e.g._, digital currency, gift cards)\n        * payment address in case of digital currency\n        * support chat or support page\n    1. Analyze affected and/or new files.  Check:\n        * file renaming scheme of encrypted files including extension (_e.g._, `.crypt`, `.cry`, `.locked`) and base name\n        * file corruption vs encryption\n        * targeted file types and locations\n        * owning user/group of affected files\n        * icon for encrypted files\n        * file markers\n        * existence of file listings, key files or other data files\n   \n\nhttps://github.com/counteractive/incident-response-plan-template/tree/master/playbooks\n",
              query: "",
              title: "Playbooks",
              layout: {
  h: 28,
  w: 48,
  x: 0,
  y: 28
}
            },
         ]
      },
{
         "tabName":"Endpoint",
         "graphs":[
           {
             graphStyle: "donut",
             layout: {
  h: 13,
  w: 13,
  x: 0,
  y: 14
},
             maxPieSlices: 10,
             query: "i.scheme='edr' \n| group endpoint_types = count() by endpoint.type \n| columns endpoint.type, endpoint_types",
             title: "Endpoint Types"
           },
           {
             graphStyle: "donut",
             layout: {
  h: 13,
  w: 21,
  x: 33,
  y: 0
},
             maxPieSlices: 10,
             query: "event.type = 'Behavioral Indicators' dataSource.category = 'security' dataSource.name = 'SentinelOne' indicator.name != null\n|group count = count() by indicator.name \n| sort -count\n| limit 10",
             title: "Top 10 Indicators"
           },
           {
             graphStyle: "stacked_bar",
             layout: {
  h: 13,
  w: 49,
  x: 0,
  y: 32
},
             title: "Behavioral Indicator Breakdown",
             barWidth: "auto",
             breakdownFacet: "indicator.category",
             lineSmoothing: "straightLines",
             plots: [
  {
    facet: "",
    filter: "event.type = 'Behavioral Indicators'  indicator.category = *",
    label: "rate"
  }
]
           },
           {
             barWidth: "auto",
             breakdownFacet: "endpoint.os",
             graphStyle: "stacked_bar",
             layout: {
  h: 13,
  w: 49,
  x: 0,
  y: 45
},
             lineSmoothing: "straightLines",
             plots: [
               {
                 facet: "rate",
                 filter: "dataSource.category = 'security'",
                 label: "rate"
               }
             ],
             title: "Events By OS"
           },
           {
             graphStyle: "",
             query: "dataSource.name='SentinelOne' src.process.name=*\n| group Count = count() by src.process.name \n| sort -Count\n| limit 10",
             showBarsColumn: "false",
             title: "Top Source Processes",
             layout: {
  h: 13,
  w: 20,
  x: 13,
  y: 14
}
           },
            
         ]
      },
{
         "tabName":"Hunting",
         "graphs":[
           {
             graphStyle: "",
             layout: {
  h: 10,
  w: 11,
  x: 11,
  y: 0
},
             query: "event.type = \"Process Creation\" endpoint.os = 'windows' src.process.image.path matches \"\\\\\\\\TEMP\\\\\\\\\" src.process.signedStatus = 'unsigned'  |\ngroup count=count(src.process.name) by src.process.name |\ncolumns src.process.name,count |\nfilter count <= 100 |\nsort -count |\nlimit 15",
             title: "Rare Windows Processes in TEMP",
             maxPieSlices: 10
           },
           {
             graphStyle: "",
             layout: {
  h: 10,
  w: 16,
  x: 0,
  y: 10
},
             query: "| parse \"user $user$ failed\" from primaryDescription\n| group NumberOfFailedLogins=count(user) by user\n| columns user, NumberOfFailedLogins\n| sort -NumberOfFailedLogins\n| limit 10",
             showBarsColumn: "true",
             title: "Failed Logins",
             maxPieSlices: 10
           },
           {
             graphStyle: "",
             honeyCombColor: {
               hover: "#8ED4FB",
               label: "Blue",
               value: "#0998E7"
             },
             honeyCombGroupBy: "",
             honeyCombLinkTo: "",
             honeyCombThresholds: ["0", "25", "50", "75"],
             layout: {
  h: 10,
  w: 18,
  x: 41,
  y: 0
},
             maxPieSlices: 10,
             query: "indicator.name contains 'Ransom'\n| group indicator.count=count() by endpoint.name \n| columns Host=endpoint.name, Hits=indicator.count\n| sort -Hits\n| limit 3",
             showBarsColumn: "true",
             title: "Hosts with most active indicators"
           },
           {
             graphStyle: "",
             layout: {
  h: 21,
  w: 17,
  x: 41,
  y: 10
},
             query: "event.category = 'indicators' \n| group UniqueIndicators = estimate_distinct(indicator.name), IndicatorNames = hacklist(indicator.name) by endpoint.name\n| sort -UniqueIndicators\n| limit 5",
             showBarsColumn: "true",
             title: "Hosts with Unique Indicators"
           },
           {
             graphStyle: "",
             honeyCombColor: {
               hover: "#8ED4FB",
               label: "Blue",
               value: "#0998E7"
             },
             honeyCombGroupBy: "",
             honeyCombLinkTo: "",
             honeyCombThresholds: ["0", "25", "50", "75"],
             layout: {
  h: 11,
  w: 18,
  x: 16,
  y: 31
},
             maxPieSlices: 15,
             query: "event.category = \"logins\" not(event.login.accountName contains '$')\n| filter event.login.type='REMOTE_INTERACTIVE'\n| group total = count() by endpoint.name, event.login.accountName, event.login.accountDomain  \n| sort -total",
             showBarsColumn: "false",
             title: "Top Hosts With Remote Logins"
           },
           {
             graphStyle: "",
             layout: {
  h: 10,
  w: 25,
  x: 16,
  y: 10
},
             title: "Admin Failed Logins",
             breakdownFacet: "data.username",
             lineSmoothing: "straightLines",
             plots: [
                            {
                              facet: "",
                              filter: "logfile = 'activities' activityType=133",
                              label: "rate"
                            }
                          ]
           },
           {
             graphStyle: "",
             layout: {
  h: 11,
  w: 16,
  x: 34,
  y: 31
},
             maxPieSlices: 10,
             query: "dataSource.category = 'security' |group Indicators = count (event.category contains 'Indicator') by endpoint.name \n|sort -Indicators",
             title: "Top Suspicious Machines",
             honeyCombColor: {
               hover: "#8ED4FB",
               label: "Blue",
               value: "#0998E7"
             },
             honeyCombGroupBy: "",
             honeyCombLinkTo: "",
             honeyCombThresholds: ["0", "25", "50", "75"],
             showBarsColumn: "true"
           },
           {
             graphStyle: "stacked",
             layout: {
  h: 11,
  w: 25,
  x: 16,
  y: 20
},
             title: "Powershell usage",
             lineSmoothing: "straightLines",
             plots: [{filter: "src.process.name = 'powershell.exe' dataSource.category = 'security'"}]
           },
           {
             graphStyle: "line",
             layout: {
  h: 11,
  w: 16,
  x: 0,
  y: 20
},
             title: "A user account was enabled.",
             plots: [{filter: "''  EventID in (4722) "}]
           },
           {
             graphStyle: "line",
             layout: {
  h: 11,
  w: 16,
  x: 0,
  y: 31
},
             plots: [
  {
    facet: "rate",
    filter: "EventID=1149 ",
    label: "rate"
  }
],
             title: "Successful RDP Sessions by public_ip",
             breakdownFacet: "public_ipv4_address"
           },
           {
             graphStyle: "",
             layout: {
  h: 10,
  w: 11,
  x: 0,
  y: 0
},
             query: "event.type = \"File Creation\" AND tgt.file.location = \"External Device\" AND tgt.file.size > 0\n\n|group FilesTransferred = count(event.type), sum(tgt.file.size) by endpoint.name, src.process.user, endpoint.os\n\n|sort - FilesTransferred",
             showBarsColumn: "false",
             title: "Data written to external drives"
           },
           {
             graphStyle: "",
             layout: {
  h: 10,
  w: 19,
  x: 22,
  y: 0
},
             query: "indicator.description contains \"T1548.002\"",
             showBarsColumn: "false",
             title: "User Access Control disable/bypass"
           }
            
         ]
      },
{
         "tabName":"User Investigation",
         "graphs":[
           {
             graphStyle: "",
             query: "| parse \"user $user$ failed\" from primaryDescription\n| group NumberOfFailedLogins=count(user) by user\n| columns user, NumberOfFailedLogins\n| sort -NumberOfFailedLogins\n| limit 10",
             title: "Failed Logins",
             maxPieSlices: 10,
             showBarsColumn: "true",
             layout: {
               h: 14,
               w: 20,
               x: 0,
               y: 0
             }
           },
           {
             graphStyle: "",
             layout: {
  h: 14,
  w: 38,
  x: 20,
  y: 0
},
             query: "event.category = 'logins' not(event.login.userName contains '$') event.login.loginIsSuccessful = true \n| columns event.time, Host=endpoint.name, User=event.login.userName,Domain=event.login.accountDomain, IsAdmin=event.login.isAdministratorEquivalent,  AccountSID=event.login.accountSid, event.login.type , Email=user.email_addr",
             showBarsColumn: "false",
             title: "All Logins"
           }
            
         ],
         filters: [
           {
             facet: "event.login.userName",
             name: "Email address"
           }
         ]
      },
{
         "tabName":"Systems Status",
         "graphs":[
           {
             graphStyle: "number",
             honeyCombColor: {
               hover: "#8ED4FB",
               label: "Blue",
               value: "#0998E7"
             },
             honeyCombGroupBy: "",
             honeyCombLinkTo: "",
             honeyCombThresholds: ["0", "25", "50", "75"],
             layout: {
  h: 5,
  w: 19,
  x: 0,
  y: 11
},
             maxPieSlices: 10,
             query: "event.type = * | group Unique = estimate_distinct(agent.uuid)+356",
             title: "Out-of-Date Agents"
           },
           {
             graphStyle: "pie",
             layout: {
  h: 11,
  w: 19,
  x: 0,
  y: 0
},
             maxPieSlices: 10,
             query: "agent.uuid = * \n| group agent_versions = count() by agent.version \n| columns agent.version, agent_versions",
             title: "Agent Versions"
           },
           {
             layout: {
  h: 16,
  w: 19,
  x: 19,
  y: 0
},
             plots: [
  {
    filter: "sumPerSecond(value where tag='logVolume' metric='logBytes') * 0.00008046627",
    label: "Total (GB/day)"
  }
],
             facet: "sumPerSecond(value)",
             label: "Log Volume (over time)"
           },
           {
             graphStyle: "stacked_bar",
             layout: {
  h: 16,
  w: 57,
  x: 0,
  y: 16
},
             title: "Collection timeline by site",
             barWidth: "auto",
             breakdownFacet: "site.name",
             lineSmoothing: "smoothCurves",
             plots: [
                            {
                              filter: "i.scheme = 'edr'",
                              label: "Rate"
                            }
                          ],
             yScale: "linear"
           },
           {
             layout: {
  h: 16,
  w: 19,
  x: 38,
  y: 0
},
             graphStyle: "donut",
             maxPieSlices: 10,
             query: "i.scheme = 'edr'\n| group events_count = count(), events_percent = percent_of_total(count(site.name)) by site.name\n| sort -events_count\n",
             title: "Events by Site"
           }
            
         ]
      },
{
         "tabName":"CmdLine Reference",
         "graphs":[
           {
             graphStyle: "markdown",
             markdown: "* **cat** - concatenates and displays the contents of a file\n  * Common Arguments:\n    * `cat file.txt` - displays the contents of the file.txt file\n    * `cat file1.txt file2.txt` - concatenates and displays the contents of file1.txt and file2.txt files\n\n* **grep** - searches for a pattern in a file or output\n  * Common Arguments:\n    * `grep pattern file.txt` - searches for the pattern in the file.txt file\n    * `grep -r pattern directory` - searches for the pattern in all files in the directory recursively\n    * `grep -v pattern file.txt` - searches for lines that do not contain the pattern in the file.txt file\n\n* **find** - searches for files and directories in a specified location\n  * Common Arguments:\n    * `find /path/to/directory -name pattern` - searches for files and directories with the name pattern in the specified directory\n    * `find /path/to/directory -type f` - searches for only files in the specified directory\n    * `find /path/to/directory -type d` - searches for only directories in the specified directory\n\n* **top** - displays real-time system resource usage and processes\n  * Common Arguments:\n    * `top` - displays real-time system resource usage and processes\n    * `top -u user` - displays real-time system resource usage and processes for the specified user\n\n* **ps** - displays information about active processes\n  * Common Arguments:\n    * `ps` - displays information about all active processes\n    * `ps aux` - displays information about all active processes along with their detailed information\n    * `ps -ef` - displays information about all active processes along with their detailed information\n\n* **lsof** - lists open files and their associated processes\n  * Common Arguments:\n    * `lsof` - lists all open files and their associated processes\n    * `lsof -i` - lists all open Internet files and their associated processes\n    * `lsof -i tcp` - lists all open TCP Internet files and their associated processes\n\n* **du** - displays the size of a directory or file\n  * Common Arguments:\n    * `du /path/to/directory` - displays the size of the specified directory\n    * `du -h` - displays the size in human-readable format\n    * `du -sh` - displays only the total size of the specified directory in human-readable format",
             query: "",
             title: "Linux",
             layout: {
  h: 23,
  w: 19,
  x: 0,
  y: 7
}
           },
           {
             graphStyle: "markdown",
             layout: {
  h: 23,
  w: 18,
  x: 19,
  y: 7
},
             markdown: "* **git init** - initializes a new Git repository\n\n* **git clone** - clones an existing Git repository\n  * Common Arguments:\n    * `git clone repository-url` - clones the repository located at the specified URL\n    * `git clone repository-url destination-directory` - clones the repository located at the specified URL into the destination directory\n\n* **git add** - stages changes to be committed\n  * Common Arguments:\n    * `git add file.txt` - stages changes to the file.txt file\n    * `git add .` - stages changes to all modified and newly created files in the current directory\n\n* **git commit** - creates a new commit\n  * Common Arguments:\n    * `git commit -m \"commit message\"` - creates a new commit with the specified commit message\n    * `git commit -a` - stages changes to all modified and deleted files and creates a new commit\n\n* **git push** - pushes changes to a remote repository\n  * Common Arguments:\n    * `git push origin branch` - pushes changes to the specified branch on the remote repository named origin\n    * `git push -u origin branch` - pushes changes to the specified branch on the remote repository named origin and sets the upstream branch\n\n* **git pull** - retrieves changes from a remote repository\n  * Common Arguments:\n    * `git pull origin branch` - retrieves changes from the specified branch on the remote repository named origin\n\n* **git checkout** - switches to a different branch or restores files\n  * Common Arguments:\n    * `git checkout branch` - switches to the specified branch\n    * `git checkout file.txt` - restores the file.txt file to its latest committed version\n\n* **git status** - displays the status of the repository\n  * No common arguments\n\n* **git diff** - displays the differences between files or commits\n  * Common Arguments:\n    * `git diff` - displays the differences between the working tree and the index\n    * `git diff branch1 branch2` - displays the differences between the two specified branches\n    * `git diff commit1 commit2` - displays the differences between the two specified commits\n\n* **git log** - displays the commit history of the repository\n  * Common Arguments:\n    * `git log` - displays the entire commit history of the repository\n    * `git log -n` - displays the latest n commits of the repository\n    * `git log --pretty=oneline` - displays the commit history in a compact one-line format\n\n* **git stash** - stashes changes that have not been staged for commit\n  * Common Arguments:\n    * `git stash` - stashes changes that have not been staged for commit\n    * `git stash apply` - reapplies the latest stash\n\n* **git reset** - resets the repository to a previous state\n  * Common Arguments:\n    * `git reset file.txt` - un-stages the file.txt file\n    * `git reset --hard commit` - resets the repository to the specified commit and discards all changes after it\n\n* **git rm** - removes files from the repository\n  * Common Arguments:\n    * `git rm file.txt` - removes the file.txt file from the repository and the file system\n    * `git rm --cached file",
             query: "",
             title: "Git"
           },
           {
             graphStyle: "markdown",
             layout: {
  h: 23,
  w: 18,
  x: 37,
  y: 7
},
             markdown: "* **Use shell variables** - store values in variables to reuse throughout your script\n  * Example:\n    ```\n    name=\"John Doe\"\n    echo \"Hello, $name!\"\n    ```\n\n* **Use command substitution** - use the output of a command as an argument or value in your script\n  * Example:\n    ```\n    current_date=$(date)\n    echo \"Today is $current_date\"\n    ```\n\n* **Use parameter expansion** - use parameter expansion to modify or extract parts of variables\n  * Example:\n    ```\n    file=\"file.txt\"\n    echo \"${file%.txt}.bak\" # outputs \"file.bak\"\n    ```\n\n* **Use arrays** - store multiple values in an array\n  * Example:\n    ```\n    colors=(\"red\" \"green\" \"blue\")\n    echo \"${colors[0]}\" # outputs \"red\"\n    ```\n\n* **Use conditionals** - use if statements to make decisions based on the success or failure of a command\n  * Example:\n    ```\n    if [ -f \"file.txt\" ]; then\n      echo \"file.txt exists\"\n    else\n      echo \"file.txt does not exist\"\n    fi\n    ```\n\n* **Use loops** - use for loops to repeat commands for each item in a list or range\n  * Example:\n    ```\n    for color in \"red\" \"green\" \"blue\"; do\n      echo $color\n    done\n    ```\n\n* **Use functions** - create reusable blocks of code as functions\n  * Example:\n    ```\n    greet() {\n      echo \"Hello, $1!\"\n    }\n    greet \"John Doe\"\n    ```\n\n* **Redirect output** - redirect the output of a command to a file or to another command\n  * Example:\n    ```\n    ls > file.txt # outputs the contents of the current directory to the file.txt file\n    ```\n\n* **Pipe output** - pipe the output of one command as the input to another command\n  * Example:\n    ```\n    ls | grep \"file\" # outputs only the lines containing the string \"file\" from the output of the ls command\n    ```\n\n* **Combine commands** - use semicolons, ampersands, and parentheses to combine multiple commands into one line\n  * Example:\n    ```\n    echo \"Starting script\"; (echo \"Running command 1\"; echo \"Running command 2\") && echo \"Script finished\"\n    ```\n\n* **Use exit codes** - check the exit code of a command to determine its success or failure\n  * Example:\n    ```\n    command\n    if [ $? -eq 0 ]; then\n      echo \"Command succeeded\"\n    else\n      echo \"Command failed\"\n    fi\n    ```\n\n* **Use command line options** - use command line options to modify the behavior of commands\n  * Example:\n    ```\n    ls -lh # lists the contents of the current directory in a long format with human-readable file sizes\n    ```\n\n* **Use command line arguments** - use command line arguments to pass values to commands\n  * Example:\n    ```\n    echo \"Hello, $1\n",
             query: "",
             title: "Bash "
           },
           {
             graphStyle: "markdown",
             layout: {
  h: 23,
  w: 19,
  x: 0,
  y: 37
},
             markdown: "* **Use variables** - store values in variables to reuse throughout your script\n  * Example:\n    ```\n    $name = \"John Doe\"\n    Write-Output \"Hello, $name!\"\n    ```\n\n* **Use cmdlets** - use cmdlets to perform various tasks and operations in PowerShell\n  * Example:\n    ```\n    Get-Process | Select-Object -First 5\n    ```\n\n* **Use the pipeline** - use the pipeline to pass the output of one cmdlet as the input to another cmdlet\n  * Example:\n    ```\n    Get-ChildItem | Where-Object { $_.Length -gt 1000 } | Select-Object Name, Length\n    ```\n\n* **Use string interpolation** - use string interpolation to include the value of a variable in a string\n  * Example:\n    ```\n    $currentDate = Get-Date\n    Write-Output \"Today is $currentDate\"\n    ```\n\n* **Use the if statement** - use if statements to make decisions based on the value of a variable or expression\n  * Example:\n    ```\n    $file = \"file.txt\"\n    if (Test-Path $file) {\n      Write-Output \"$file exists\"\n    } else {\n      Write-Output \"$file does not exist\"\n    }\n    ```\n\n* **Use loops** - use for loops to repeat commands for each item in a collection\n  * Example:\n    ```\n    $colors = \"red\", \"green\", \"blue\"\n    foreach ($color in $colors) {\n      Write-Output $color\n    }\n    ```\n\n* **Use functions** - create reusable blocks of code as functions\n  * Example:\n    ```\n    function Greet($name) {\n      Write-Output \"Hello, $name!\"\n    }\n    Greet -Name \"John Doe\"\n    ```\n\n* **Redirect output** - redirect the output of a command to a file or to another command\n  * Example:\n    ```\n    Get-ChildItem > file.txt # outputs the contents of the current directory to the file.txt file\n    ```\n\n* **Use the switch statement** - use the switch statement to make decisions based on multiple possible values of a variable or expression\n  * Example:\n    ```\n    $value = \"red\"\n    switch ($value) {\n      \"red\" { Write-Output \"The value is red\" }\n      \"green\" { Write-Output \"The value is green\" }\n      \"blue\" { Write-Output \"The value is blue\" }\n      default { Write-Output \"The value is not red, green, or blue\" }\n    }\n    ```\n\n* **Use try-catch blocks** - use try-catch blocks to handle exceptions and errors in your scripts\n  * Example:\n    ```\n    try {\n      Get-ChildItem -Path does_not_exist\n    } catch {\n      Write-Output \"An error occurred: $_\"\n    }\n    ```\n\n* **Use the -WhatIf parameter** - use the -WhatIf parameter to preview the effects of a command before running it\n  * Example:\n    ```\n    Remove-Item -Path file.txt -WhatIf\n    ```\n",
             query: "",
             title: "Powershell"
           },
           {
             graphStyle: "markdown",
             markdown: "![](https://cdn0.iconfinder.com/data/icons/cosmo-multimedia/40/terminal_application-128.png)",
             query: "",
             title: " ",
             layout: {
  h: 7,
  w: 19,
  x: 0,
  y: 0
}
           },
           {
             graphStyle: "markdown",
             layout: {
  h: 7,
  w: 18,
  x: 19,
  y: 0
},
             markdown: "![](https://cdn3.iconfinder.com/data/icons/programming-it-line/100/programming-fork-2-128.png)",
             query: "",
             title: " "
           },
           {
             graphStyle: "markdown",
             layout: {
  h: 7,
  w: 19,
  x: 0,
  y: 30
},
             markdown: "![](https://www.file-extensions.org/imgs/app-icon/128/7045/windows-powershell-icon.png)",
             query: "",
             title: " "
           },
           {
             graphStyle: "markdown",
             layout: {
  h: 7,
  w: 18,
  x: 37,
  y: 0
},
             markdown: "![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/13/Poundexclam.svg/120px-Poundexclam.svg.png)",
             query: "",
             title: " "
           },
           {
             graphStyle: "markdown",
             layout: {
  h: 7,
  w: 18,
  x: 19,
  y: 30
},
             markdown: "![](https://cdn4.iconfinder.com/data/icons/logos-and-brands/512/267_Python_logo-128.png)",
             query: "",
             title: " "
           },
           {
             graphStyle: "markdown",
             layout: {
  h: 23,
  w: 18,
  x: 19,
  y: 37
},
             markdown: "* **Use variables** - store values in variables to reuse throughout your script\n  * Example:\n    ```\n    name = \"John Doe\"\n    print(f\"Hello, {name}!\")\n    ```\n\n* **Use lists** - store a collection of values in a list\n  * Example:\n    ```\n    colors = [\"red\", \"green\", \"blue\"]\n    print(colors)\n    ```\n\n* **Use dictionaries** - store key-value pairs in a dictionary\n  * Example:\n    ```\n    person = {\"name\": \"John Doe\", \"age\": 30}\n    print(person[\"name\"])\n    ```\n\n* **Use for loops** - use for loops to repeat commands for each item in a collection\n  * Example:\n    ```\n    for color in colors:\n      print(color)\n    ```\n\n* **Use functions** - create reusable blocks of code as functions\n  * Example:\n    ```\n    def greet(name):\n      print(f\"Hello, {name}!\")\n    greet(\"John Doe\")\n    ```\n\n* **Use the if statement** - use if statements to make decisions based on the value of a variable or expression\n  * Example:\n    ```\n    age = 30\n    if age >= 18:\n      print(\"You are an adult\")\n    ```\n\n* **Use the while loop** - use the while loop to repeat commands while a condition is true\n  * Example:\n    ```\n    count = 0\n    while count < 5:\n      print(count)\n      count += 1\n    ```\n\n* **Use exceptions** - use exceptions to handle errors in your code\n  * Example:\n    ```\n    try:\n      1/0\n    except ZeroDivisionError:\n      print(\"Cannot divide by zero\")\n    ```\n\n* **Use modules** - use modules to reuse code from other files or from the Python Standard Library\n  * Example:\n    ```\n    import random\n    print(random.choice(colors))\n    ```\n\n* **Use classes** - create custom objects and define their behavior using classes\n  * Example:\n    ```\n    class Person:\n      def __init__(self, name, age):\n        self.name = name\n        self.age = age\n      def greet(self):\n        print(f\"Hello, I am {self.name}\")\n    person = Person(\"John Doe\", 30)\n    person.greet()\n    ```\n\n* **Use list comprehensions** - use list comprehensions to create lists in a concise way\n  * Example:\n    ```\n    numbers = [1, 2, 3, 4, 5]\n    squares = [number**2 for number in numbers]\n    print(squares)\n    ```\n\n* **Use generators** - use generators to generate values on the fly\n  * Example:\n    ```\n    def fibonacci():\n      a, b = 0, 1\n      while True:\n        yield a\n        a, b = b, a + b\n    fib = fibonacci()\n    print([next(fib) for _ in range(10)])\n    ```\n\n* **Use regular expressions**\n",
             query: "",
             title: "Python"
           },
           {
             graphStyle: "markdown",
             layout: {
  h: 7,
  w: 18,
  x: 37,
  y: 30
},
             markdown: "![](https://cdn1.iconfinder.com/data/icons/web-design-seo/512/32-128.png)",
             query: "",
             title: " "
           },
           {
             graphStyle: "markdown",
             layout: {
  h: 23,
  w: 18,
  x: 37,
  y: 37
},
             markdown: "* **Use registers** - use registers to store values and perform calculations\n  * Example (x86 Assembly):\n    ```\n    mov eax, 5 ; move the value 5 into the EAX register\n    add eax, 6 ; add 6 to the value in EAX\n    ```\n\n* **Use the stack** - use the stack to store values temporarily and pass arguments to functions\n  * Example (x86 Assembly):\n    ```\n    push 5 ; push the value 5 onto the stack\n    pop eax ; pop the top value from the stack into EAX\n    ```\n\n* **Use jumps and labels** - use jumps and labels to change the flow of execution in your code\n  * Example (x86 Assembly):\n    ```\n    jmp start ; jump to the label 'start'\n    ...\n    start:\n    ...\n    ```\n\n* **Use conditional jumps** - use conditional jumps to make decisions based on the values in registers\n  * Example (x86 Assembly):\n    ```\n    cmp eax, 5 ; compare the value in EAX to 5\n    jne skip ; if they are not equal, jump to the label 'skip'\n    ...\n    skip:\n    ...\n    ```\n\n* **Use the procedure call convention** - use the procedure call convention to call functions and return values\n  * Example (x86 Assembly):\n    ```\n    call my_function ; call the function 'my_function'\n    ...\n    my_function:\n    ...\n    ret ; return from the function\n    ```\n\n* **Use system calls** - use system calls to interact with the operating system\n  * Example (x86 Assembly):\n    ```\n    mov eax, 4 ; set EAX to the system call number for 'write'\n    mov ebx, 1 ; set EBX to the file descriptor for stdout\n    mov ecx, message ; set ECX to the address of the message to write\n    mov edx, message_len ; set EDX to the length of the message\n    int 0x80 ; trigger the system call\n    ```\n\n* **Use macros** - use macros to define reusable blocks of code\n  * Example (x86 Assembly):\n    ```\n    %macro print_message 1\n    mov eax, 4 ; set EAX to the system call number for 'write'\n    mov ebx, 1 ; set EBX to the file descriptor for stdout\n    mov ecx, %1 ; set ECX to the address of the message to write\n    mov edx, %1$len ; set EDX to the length of the message\n    int 0x80 ; trigger the system call\n    %endmacro\n    ...\n    print_message message\n    ```\n\n* **Use memory access instructions** - use memory access instructions to read and write values in memory\n  * Example (x86 Assembly):\n    ```\n    mov [buffer], eax ; store the value in EAX in memory at the address in buffer\n    mov eax, [buffer] ; load the value in memory at the address in buffer into EAX\n    ```\n\n* **Use indirect addressing** - use indirect addressing to access values in memory indirectly\n  * Example (x86 Assembly):\n    ```\n    mov ebx, buffer ; set EBX to the address of\n",
             query: "",
             title: "Assembly"
           },
           {
             graphStyle: "pie",
             maxPieSlices: 10,
             query: "",
             title: "Untitled",
             layout: {
  h: 3,
  w: 9,
  x: 0,
  y: 60
}
           }
         ]
      },
{"tabName":"Intro","graphs":[
  {
    graphStyle: "markdown",
    title: " Platform Overview",
    markdown: "![](https://se-public-demo-imgs.s3.amazonaws.com/1.png)",
    query: "",
    layout: {
  h: 35,
  w: 60,
  x: 0,
  y: 0
}
  },
  {
    graphStyle: "pie",
    maxPieSlices: 10,
    query: "",
    title: "test",
    layout: {
  h: 3,
  w: 6,
  x: 0,
  y: 35
}
  },
  {
    graphStyle: "markdown",
    layout: {
  h: 35,
  w: 60,
  x: 0,
  y: 0
},
    markdown: "![](https://se-public-demo-imgs.s3.amazonaws.com/2.png)",
    query: "",
    title: "Adversarial Strategies"
  },
  {
    graphStyle: "markdown",
    layout: {
  h: 35,
  w: 60,
  x: 0,
  y: 0
},
    markdown: "![](https://se-public-demo-imgs.s3.amazonaws.com/3.png)",
    query: "",
    title: "SolarWinds SUNBURST Malware"
  }
]}],
   "configType":"TABBED",
   description: ""
}
