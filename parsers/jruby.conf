{ 
  // specify a time zone if the timestamps in your log are not in GMT 
  timezone: "PST"
  lineGroupers: [
    //complex groupers due to wrapper 2021-12-07T11:43:55.851913595-08:00 stdout F 2021-12-07 11:43:55.851
 /*  {
    start: "^\\d+-\\d+-\\d+[\\s+T]\\d+:\\d+:\\d+\\.\\d+[-\\d:]+ stdout [^\\s]+ [^\\s]+ [^\\s]+ \\[ERROR\\]"
    continueThrough: "^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+\\.\\d+-\\d+:\\d+ [^\\s]+ [^\\s]+\\s+(com|org|at|Caused by|\\.\\.\\.)"
   
  }
    {
    start: "\\d+-\\d+-\\d+[T\\s]\\d+:\\d+:\\d+\\.\\d+(.?\\d+:\\d+) \\w+ \\w \\[?(\\d+-\\d+-\\d+ \\d+:\\d+:\\d+\\.\\d+|(\\d+\\.\\d+\\.\\d+\\.\\d+)(,\\s?\\d+\\.\\d+\\.\\d+\\.\\d+)*)\\]?\\s[›-]"
    haltBefore: "\\d+-\\d+-\\d+[T\\s]\\d+:\\d+:\\d+\\.\\d+(.?\\d+:\\d+) \\w+ \\w \\[?(\\d+-\\d+-\\d+ \\d+:\\d+:\\d+\\.\\d+|(\\d+\\.\\d+\\.\\d+\\.\\d+)(,\\s?\\d+\\.\\d+\\.\\d+\\.\\d+)*)\\]?\\s[›-]"
   
  }*/
    {
       start: "^(\\d+:\\d+:\\d+\\s+\\w+\\.\\d+\\s+\\|\\s+)?\\[?\\d+-\\d+-\\d+[\\sT]\\d+:\\d+:\\d+(\\.\\d+)?\\s*(.\\d+|Z)?\\]?"
  haltBefore: "^(\\d+:\\d+:\\d+\\s+\\w+\\.\\d+\\s+\\|\\s+)?\\[?\\d+-\\d+-\\d+[\\sT]\\d+:\\d+:\\d+(\\.\\d+)?\\s*(.\\d+|Z)?\\]?"
    }
 //   14:27:41 web.1    | [2021-12-29 14:27:41.742131 -0800] 
  ]
  patterns: {
    arrayValPattern: "[^\\}]+"
    valPattern: "[^,\\]\\}\\{=]+"
    datetime: "(\\d+-\\d+-\\d+[\\s+T]\\d+:\\d+:\\d+[:.]\\d+[-\\d:]*)"
    utcpattern: "\\d+-\\d+-\\d+T\\d+:\\d+:\\d+\\.\\d+Z"
    severityPattern: "\\w+"
    ipPattern: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    correlationIdPattern: "[a-z0-9_]+(-[a-z0-9_]+)+"
    }
  formats: [
    {
      format: ".*\\| \\[?$timestamp=utcpattern$\\]?"
      attribute: [{timezone: "UTC"}]
    },
    {
      format: ".*\\| \\[?$timestamp=datetime$\\]?"
    },
    {
      format: "\\[?$timestamp=datetime$\\]?"
    },
    {
      format: ".*› $severity=severityPattern$ "
    },
    {
      format: ".*› $severity=severityPattern$ "
    },
    {
      format: ".*$ip=ipPattern$ - - \\[[^\\]]+\\] \"$method$ ${parse=uri}$ $http_version$\" $status$ $time$ $bytes=quotable$ $version=quotable$"
    },
    {
      format: ".*$ip=ipPattern$ - - \\[[^\\]]+\\] \"$method$ ${parse=uri}$\" $status$ $time$ $bytes=quotable$ $version=quotable$"
    },
    
    {
      format: ".*Correlation\\s?ID[:=]\\s*$correlationId=correlationIdPattern$"
    },
    {
      format: ".*Request\\s*ID[:=]\\s*$requestId$[\\]\\s]"
    },
    {
      format: ".*API[:=]\\s*$api{parse=uri}$[\\]\\s]"
    }
    
    {
      format: "$timestamp=datetime$ $stream$ $var$ \\d+-\\d+-\\d+ \\d+:\\d+:\\d+\\.\\d+ \\[$severity=severityPattern$\\]"
    },
      {
      format: "$timestamp=datetime$ $stream$ $var$ \\d+-\\d+-\\d+ \\d+:\\d+:\\d+\\.\\d+ \\[?$severity=severityPattern$\\]?"
    },
    
    {
      format: "$timestamp=datetime$ $stream$ $var$ "
    },
    {
      format: ".*\\| \\[$timestamp$\\] \\[$var1$\\] $serverity$ -- "
    },
      

//grabs arrays like map={entity_roles=[AllMyCopartUsers, Employee ID - Restricted, OKta Homepage Yard Users - US, Okta MFA O365 Exclusion} goes from { to } define fields in whitelist (map|next field)
    {
      format: ".*$_=identifier$=\\{$_=arrayValPattern{attrWhiteList=(map)}$\\}?"
      repeat: true
    }
    {
      format: ".*$_=identifier$=\\[?$_$[\\],]?"
      repeat: true
    }
    {
      format: ".*$_=identifier$: \"?$_$\"?[,\n\\}\\]]"
      repeat: true
    }
  ]
}
