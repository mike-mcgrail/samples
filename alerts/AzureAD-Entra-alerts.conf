{
  // Address to which alert e-mails are sent.
  alertAddress: "",
  alerts: [
    {
      description: "AzureAD / MSFT Entra: Accoun Creation",
      gracePeriodMinutes: 0,
      renotifyPeriodMinutes: 60,
      resolutionDelayMinutes: 0,
      trigger: "count:1 days(event.details = 'Add provisioning configuration') > 0"
    },
    {
      description: "AzureAD / MSFT Entra: Account Deletion",
      gracePeriodMinutes: 0,
      renotifyPeriodMinutes: 60,
      resolutionDelayMinutes: 0,
      trigger: "count:1 days(event.details = 'Delete provisioning configuration') > 0"
    },
    {
      description: "AzureAD / MSFT Entra: Impossible Traveler",
      evaluationFrequencyMinutes: 15,
      gracePeriodMinutes: 0,
      renotifyPeriodMinutes: 60,
      resolutionDelayMinutes: 0,
      trigger: "tableRows:1 hours(| join a = (dataSource.name='Azure Event Hub' src.ip.address=* !(response.error_message =*) | columns timestamp, user.name, src.ip.address | group timestamp=min(timestamp) by user.name, src.ip.address | sort user.name, timestamp | let joinID=running_sum(1)), b = (dataSource.name='Azure Event Hub' src.ip.address=* !(response.error_message =*) | columns timestamp, user.name, src.ip.address | group timestamp=min(timestamp) by user.name, src.ip.address | sort user.name, timestamp | let joinID=running_sum(1)+1) on joinID\n| sort joinID \n| filter a.user.name == b.user.name\n| let distance_a_to_b = geo_distance(geo_ip_location(a.src.ip.address), geo_ip_location(b.src.ip.address))\n| filter distance_a_to_b > 500\n| let timedelta=abs((b.timestamp - a.timestamp)/1000000000/60/60)\n| let velocity_kph=distance_a_to_b/timedelta\n| filter velocity_kph > 1000) > 0"
    },
    {
      description: "AzureAD / MSFT Entra: Login with MFA disabled",
      gracePeriodMinutes: 0,
      renotifyPeriodMinutes: 60,
      resolutionDelayMinutes: 0,
      trigger: "1 days(dataSource.name='Azure Event Hub' auth_requirement='singleFactorAuthentication' !(response.error_message =*) user.email_addr = * | group total = count() by user.email_addr | filter total > 0)",
      type: "GROUPED",
      evaluationFrequencyMinutes: 60
    },
    {
      description: "AzureAD / MSFT Entra: MFA method changed/removed",
      evaluationFrequencyMinutes: 60,
      gracePeriodMinutes: 0,
      renotifyPeriodMinutes: 60,
      resolutionDelayMinutes: 0,
      trigger: "1 days(dataSource.name='Azure Event Hub' event.details in (\"Assign Hardware Oath token\", \"Create Hardware Oath Token\",\"Delete Hardware Oath Token\",\"Update Hardware Oath Token\",\"Register TOTP secret\",\"User registered security info\", \"Admin registered security info\",\"User registered all required security info\") user.email_addr = * | group total = count() by user.email_addr | filter total > 0)",
      type: "GROUPED"
    },
    {
      description: "AzureAD / MSFT Entra: Excessive Logins attempts per minute",
      gracePeriodMinutes: 0,
      renotifyPeriodMinutes: 60,
      resolutionDelayMinutes: 0,
      trigger: "1 minutes(dataSource.name='Azure Event Hub' event.details='Sign-in activity' !(response.error_message =*) user.email_addr = * | group total = count() by user.email_addr | filter total > 5)",
      type: "GROUPED"
    },
    {
      description: "AzureAD / MSFT Entra: Excessive Failed Logins",
      evaluationFrequencyMinutes: 15,
      gracePeriodMinutes: 0,
      renotifyPeriodMinutes: 60,
      resolutionDelayMinutes: 0,
      trigger: "8 hours(dataSource.name='Azure Event Hub' event.type='SignInLogs' (response.error_message contains \"blocked\" OR response.error_message contains \"Invalid Password\" OR response.error_message contains \"Authentication failed\" OR \"Account is locked\") user.name = * | group total = count() by user.name | filter total > 5)",
      type: "GROUPED"
    },
    {
      description: "AzureAD / MSFT Entra: Logins from Suspicious IPs/locations",
      evaluationFrequencyMinutes: 5,
      gracePeriodMinutes: 0,
      note: "blocking based on IPs is handled by MSFTs threat intel of bad IPs. You can technically import your own lists as tables & we can check against them, but I don't think it is worth it. Since you don't really need to report on blocked logins by MSFT, I would look at the second query:",
      renotifyPeriodMinutes: 60,
      resolutionDelayMinutes: 0,
      trigger: "tableRows:10 minutes(dataSource.name='Azure Event Hub' event.type='SignInLogs' !(response.error_message=*)\n| let country=geo_ip_country(src.ip.address)\n| filter country in (\"China\",\"Russia\", \"Iran\",\"North Korea\")\n| group Count=count() by country) > 0"
    }
  ]
}
